<!DOCTYPE html>
<html lang="fa" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>اعلان‌ها | سامانه دولتی</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Tahoma, sans-serif;
            background: #f5f5f7;
            direction: rtl;
            color: #1f2937;
        }

        header {
            background: #1e3a8a;
            color: #fff;
            padding: 24px;
            text-align: center;
            font-size: 28px;
            font-weight: bold;
            position: relative;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        }

        #notificationBadge {
            position: absolute;
            top: 18px;
            left: 30px;
            background: #dc2626;
            color: #fff;
            font-size: 16px;
            font-weight: bold;
            padding: 4px 12px;
            border-radius: 50px;
            min-width: 24px;
            text-align: center;
            transition: 0.3s;
        }

        nav {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 12px 0;
        }

        nav a {
            color: #fff;
            font-weight: 600;
            padding: 10px 22px;
            border-radius: 12px;
            transition: 0.3s;
            text-decoration: none;
        }

        nav a:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .container {
            max-width: 1000px;
            margin: 30px auto;
            padding: 0 20px;
        }

        .filter-search {
            display: flex;
            justify-content: space-between;
            gap: 15px;
            flex-wrap: wrap;
            margin-bottom: 20px;
            background: #fff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
            align-items: center;
        }

        .filter-search select,
        .filter-search input {
            border: 1px solid #cbd5e1;
            border-radius: 10px;
            padding: 10px 12px;
            font-size: 14px;
        }

        .filter-search button {
            background: #1e3a8a;
            color: white;
            border-radius: 10px;
            font-weight: 600;
            padding: 10px 16px;
            cursor: pointer;
            border: none;
            transition: 0.3s;
        }

        .filter-search button:hover {
            background: #1e40af;
        }

        #markAllReadBtn {
            background: #16a34a;
            color: white;
            padding: 12px 24px;
            font-weight: bold;
            border-radius: 12px;
            cursor: pointer;
            margin-bottom: 20px;
            border: none;
            transition: 0.3s;
        }

        #markAllReadBtn:hover {
            background: #15803d;
        }

        ul.notifications {
            list-style: none;
            padding: 0;
        }

        ul.notifications li {
            background: #fff;
            margin-bottom: 16px;
            padding: 20px;
            border-radius: 14px;
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.06);
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s;
            cursor: grab;
            opacity: 0;
            transform: translateY(20px);
            animation: slideIn 0.4s forwards;
        }

        ul.notifications li.unread {
            border-right: 5px solid #1e3a8a;
            background: #e0f2fe;
            font-weight: bold;
        }

        ul.notifications li:hover {
            transform: scale(1.02);
            box-shadow: 0 12px 26px rgba(0, 0, 0, 0.12);
        }

        .priority {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 8px;
            font-size: 13px;
            margin-left: 8px;
            font-weight: 600;
            color: #fff;
        }

        .info {
            background: #3b82f6;
        }

        .success {
            background: #16a34a;
        }

        .warning {
            background: #f59e0b;
            color: #000;
        }

        .error {
            background: #dc2626;
        }

        .actions button {
            margin-left: 8px;
            padding: 8px 16px;
            font-size: 14px;
            font-weight: 600;
            border-radius: 10px;
            border: none;
            cursor: pointer;
            transition: 0.2s;
            position: relative;
            overflow: hidden;
        }

        .actions button::after {
            content: '';
            position: absolute;
            left: 50%;
            top: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            transform: translate(-50%, -50%);
            border-radius: 50%;
            transition: width 0.3s, height 0.3s;
        }

        .actions button:active::after {
            width: 120%;
            height: 400%;
        }

        .mark-read-btn {
            background: #16a34a;
            color: white;
        }

        .mark-read-btn:hover {
            background: #15803d;
        }

        .archive-btn {
            background: #6b7280;
            color: white;
        }

        .archive-btn:hover {
            background: #4b5563;
        }

        .important-btn {
            background: #facc15;
            color: white;
        }

        .important-btn:hover {
            background: #eab308;
        }

        .important {
            color: #dc2626;
            font-weight: bold;
        }

        #toastContainer {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9999;
        }

        .toast {
            background: #1e3a8a;
            color: white;
            padding: 14px 24px;
            border-radius: 12px;
            margin-top: 10px;
            min-width: 200px;
            box-shadow: 0 6px 18px rgba(0, 0, 0, 0.22);
            opacity: 0;
            transform: translateY(50px);
            animation: fadeInUp 0.5s forwards;
        }

        .toast.important {
            background: #dc2626;
        }

        @keyframes slideIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media(max-width:650px) {
            .actions {
                flex-direction: column;
                gap: 8px;
                margin-top: 10px;
            }

            .filter-search {
                flex-direction: column;
                gap: 12px;
            }
        }
    </style>
</head>

<body>
    <header>
        اعلان‌ها
        <span id="notificationBadge">0</span>
    </header>
    <nav>
        <a href="/dashboard">داشبورد</a>
        <a href="/logout">خروج</a>
    </nav>

    <div class="container">
        <div class="filter-search">
            <div>
                <select id="filterType">
                    <option value="">همه نوع‌ها</option>
                    <option value="info">Info</option>
                    <option value="success">Success</option>
                    <option value="warning">Warning</option>
                    <option value="error">Error</option>
                </select>
                <select id="filterPriority">
                    <option value="">همه اولویت‌ها</option>
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                </select>
            </div>
            <div style="display:flex; gap:5px;">
                <input type="text" id="searchKeyword" placeholder="جستجو...">
                <button id="searchBtn">🔍</button>
            </div>
        </div>

        <button id="markAllReadBtn">علامت همه خوانده شده</button>

        <ul class="notifications" id="notificationsList">
            <% if (notifications && notifications.length) { %>
                <% notifications.forEach(n=> { %>
                    <li class="<%= n.read ? '' : 'unread' %>" data-id="<%= n.id %>">
                        <span>
                            <span class="priority <%= n.priority %>">
                                <%= n.priority %>
                            </span>
                            <span class="<%= n.is_important ? 'important' : '' %>">
                                <%= n.message %>
                            </span>
                            - <small>
                                <%= new Date(n.created_at).toLocaleString() %>
                            </small>
                        </span>
                        <div class="actions">
                            <% if (!n.read) { %><button class="mark-read-btn" data-id="<%= n.id %>">خواندن</button>
                                <% } %>
                                    <button class="archive-btn" data-id="<%= n.id %>">آرشیو</button>
                                    <button class="important-btn" data-id="<%= n.id %>">⭐</button>
                        </div>
                    </li>
                    <% }) %>
                        <% } else { %>
                            <li>هیچ اعلانی وجود ندارد</li>
                            <% } %>
        </ul>
    </div>

    <div id="toastContainer"></div>

    <script>
        const socket = io();
        const notificationsList = document.getElementById('notificationsList');
        const badge = document.getElementById('notificationBadge');
        let unreadCount = document.querySelectorAll('li.unread').length;
        badge.textContent = unreadCount;

        function showToast(message, isImportant = false) {
            const toast = document.createElement('div');
            toast.className = 'toast' + (isImportant ? ' important' : '');
            toast.textContent = message;
            document.getElementById('toastContainer').appendChild(toast);
            setTimeout(() => toast.remove(), 4000);
        }

        socket.on('newNotification', data => {
            addNotificationToList(data.notification);
            unreadCount++; badge.textContent = unreadCount;
            showToast(data.notification.message, data.notification.is_important);
        });

        socket.on('notificationRead', ({ id }) => {
            const li = document.querySelector(`li[data-id='${id}']`);
            if (li) { li.classList.remove('unread'); unreadCount--; badge.textContent = unreadCount; }
        });

        socket.on('allNotificationsRead', () => {
            document.querySelectorAll('li.unread').forEach(li => li.classList.remove('unread'));
            unreadCount = 0; badge.textContent = unreadCount;
        });

        function addNotificationToList(n) {
            const li = document.createElement('li');
            li.className = n.read ? '' : 'unread';
            li.dataset.id = n.id;
            li.innerHTML = `<span>
                <span class="priority ${n.priority}">${n.priority}</span>
                <span class="${n.is_important ? 'important' : ''}">${n.message}</span>
                - <small>${new Date(n.created_at).toLocaleString()}</small>
            </span>
            <div class="actions">
                ${!n.read ? `<button class="mark-read-btn" data-id="${n.id}">خواندن</button>` : ''}
                <button class="archive-btn" data-id="${n.id}">آرشیو</button>
                <button class="important-btn" data-id="${n.id}">⭐</button>
            </div>`;
            notificationsList.prepend(li);
            attachButtonListeners(li);
            addDragAndDrop(li);
        }

        function attachButtonListeners(context = document) {
            context.querySelectorAll('.mark-read-btn').forEach(btn => {
                btn.onclick = async () => {
                    const id = btn.dataset.id;
                    const res = await fetch(`/notifications/markRead/${id}`, { method: 'POST' });
                    if (res.ok) { btn.closest('li').classList.remove('unread'); unreadCount--; badge.textContent = unreadCount; }
                }
            });
            context.querySelectorAll('.archive-btn').forEach(btn => {
                btn.onclick = async () => {
                    const id = btn.dataset.id;
                    const res = await fetch(`/notifications/archive/${id}`, { method: 'POST' });
                    if (res.ok) btn.closest('li').remove();
                }
            });
            context.querySelectorAll('.important-btn').forEach(btn => {
                btn.onclick = async () => {
                    const id = btn.dataset.id;
                    const res = await fetch(`/notifications/toggleImportant/${id}`, { method: 'POST' });
                    if (res.ok) btn.closest('li').querySelector('span span:nth-child(2)').classList.toggle('important');
                }
            });
        }
        attachButtonListeners();

        document.getElementById('markAllReadBtn').addEventListener('click', async () => {
            const res = await fetch('/notifications/markAllRead', { method: 'POST' });
            if (res.ok) { document.querySelectorAll('li.unread').forEach(li => li.classList.remove('unread')); unreadCount = 0; badge.textContent = unreadCount; }
        });

        document.getElementById('searchBtn').addEventListener('click', async () => {
            const keyword = document.getElementById('searchKeyword').value;
            const type = document.getElementById('filterType').value;
            const priority = document.getElementById('filterPriority').value;
            const params = new URLSearchParams({ keyword, type, priority });
            const res = await fetch('/notifications/search?' + params.toString());
            const data = await res.json();
            notificationsList.innerHTML = '';
            data.forEach(addNotificationToList);
        });

        let dragSrcEl = null;
        function handleDragStart(e) { dragSrcEl = this; this.style.opacity = '0.4'; }
        function handleDragEnd(e) { this.style.opacity = '1'; }
        function handleDragOver(e) { e.preventDefault(); }
        function handleDrop(e) {
            e.stopPropagation();
            if (dragSrcEl !== this) {
                const parent = dragSrcEl.parentNode;
                let nodes = Array.from(parent.children);
                let srcIndex = nodes.indexOf(dragSrcEl);
                let destIndex = nodes.indexOf(this);
                if (srcIndex < destIndex) parent.insertBefore(dragSrcEl, this.nextSibling);
                else parent.insertBefore(dragSrcEl, this);
            }
            return false;
        }
        function addDragAndDrop(el) {
            el.setAttribute('draggable', true);
            el.addEventListener('dragstart', handleDragStart);
            el.addEventListener('dragend', handleDragEnd);
            el.addEventListener('dragover', handleDragOver);
            el.addEventListener('drop', handleDrop);
        }
        notificationsList.querySelectorAll('li').forEach(addDragAndDrop);
        const observer = new MutationObserver(mutations => {
            mutations.forEach(m => {
                if (m.addedNodes.length) m.addedNodes.forEach(n => {
                    if (n.tagName === 'LI') addDragAndDrop(n);
                });
            });
        });
        observer.observe(notificationsList, { childList: true });
    </script>
</body>

</html>